#!/bin/bash
NS="port-hopper-namespace"
NS_OUTER_DEV="outer_veth"
NS_INNER_DEV="inner_veth"
BRIDGE="br0"
VM_IMAGE="iso/alpine.img"
BUILD_DIR="build"
IP_OUTER="192.168.1.1/24"
IP_INNER="192.168.1.2/24"

usage() {
    echo "Usage: $0 [command] [options]"
    echo "Commands and options:"
    echo "  setup-ns [-n ns] [-o outer_dev] [-i inner_dev]  Create namespace"
    echo "  remove-ns [-n ns]                               Remove network namespace"
    echo "  enter-ns [-n ns]                                Enter network namespace"
    echo "  setup-vm [-b bridge] [-i image                  Set up Linux bridge and QEMU VMs"
    echo "  clean [-b bridge] [-n ns]                       Clean up all resources"
    exit 1
}

compile() {
    make all
}

# Parse options for commands
parse_options() {
    local cmd=$1
    shift
    case $cmd in
        setup-vm)
            while getopts "b:i:" opt; do
                case $opt in
                    b) BRIDGE="$OPTARG";;
                    i) VM_IMAGE="$OPTARG";;
                    *) usage;;
                esac
            done
            ;;
        setup-ns)
            while getopts "n:o:i:a:b:" opt; do
                case $opt in
                    n) NS="$OPTARG";;
                    o) NS_OUTER_DEV="$OPTARG";;
                    i) NS_INNER_DEV="$OPTARG";;
                    *) usage;;
                esac
            done
            ;;
        remove-ns|enter-ns)
            while getopts "n:" opt; do
                case $opt in
                    n) NS="$OPTARG";;
                    *) usage;;
                esac
            done
            ;;
        clean)
            while getopts "b:n:" opt; do
                case $opt in
                    b) BRIDGE="$OPTARG";;
                    n) NS="$OPTARG";;
                    *) usage;;
                esac
            done
            ;;
        *) usage;;
    esac
}

# Set up VMs and bridge
setup_vm() {
    sudo ip link add "$BRIDGE" type bridge
    sudo ip link set dev "$BRIDGE" up
    for i in 0 1; do
        sudo qemu-kvm --enable-kvm -m 1G -hda "$VM_IMAGE" -snapshot -daemonize \
            -device e1000,mac="aa:54:00:00:00:9${i},netdev=lan${i},id=lan${i}" \
            -netdev tap,id=lan${i},ifname=tap${i},script=no,downscript=no
        sudo ip link set dev tap${i} master "$BRIDGE"
        sudo ip link set dev tap${i} up
    done
    sudo ip addr add 192.168.1.1/24 dev "$BRIDGE"
    echo "VMs and bridge configured"
}

# Set up network namespace
setup_ns() {
    sudo ip netns add "$NS"
    sudo ip link add dev "$NS_OUTER_DEV" type veth peer "$NS_INNER_DEV" netns "$NS"
    sudo ip link set "$NS_OUTER_DEV" up
    sudo ip addr add "$IP_OUTER" dev "$NS_OUTER_DEV"
    sudo tc qdisc add dev "$NS_OUTER_DEV" clsact
    sudo ip netns exec "$NS" ip link set "$NS_INNER_DEV" up
    sudo ip netns exec "$NS" ip addr add "$IP_INNER" dev "$NS_INNER_DEV"
    sudo ip netns exec "$NS" tc qdisc add dev "$NS_INNER_DEV" clsact
    sudo mkdir -p /var/run/netns/bpf
    sudo mount --bind /sys/fs/bpf/ /var/run/netns/bpf
    echo "Namespace $NS configured"
}

# Remove network namespace
remove_ns() {
    unload_bpf "$NS_OUTER_DEV"
    unload_bpf "$NS_INNER_DEV"
    sudo umount /var/run/netns/bpf 2>/dev/null
    sudo ip netns delete "$NS" 2>/dev/null
    echo "Namespace $NS removed"
}

# Enter network namespace
enter_ns() {
    sudo ip netns exec "$NS" bash -c "mount --bind /var/run/netns/bpf/ /sys/fs/bpf/; env PS1='# ' bash"
}

# Clean up all resources
clean() {
    remove_ns
    sudo ip link delete "$BRIDGE" 2>/dev/null
    rm -rf "$BUILD_DIR"/*.o
    echo "All resources cleaned"
}

# Main command dispatcher
[ $# -eq 0 ] && usage
cmd="$1"
shift
parse_options "$cmd" "$@"
case "$cmd" in
    load)  unload_bpf "$NS_OUTER_DEV"; unload_bpf "$NS_INNER_DEV"; load_bpf "$NS_OUTER_DEV"; load_bpf "$NS_INNER_DEV";;
    unload) unload_bpf "$NS_OUTER_DEV"; unload_bpf "$NS_INNER_DEV";;
    setup-vm) clean; setup_vm;;
    setup-ns) remove_ns; setup_ns;;
    remove-ns) remove_ns;;
    enter-ns) enter_ns;;
    clean) clean;;
    *) usage;;
esac